// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: pay_client.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PayService_VirtualAccount_FullMethodName  = "/pb.pay_service/virtual_account"
	PayService_Receive_FullMethodName         = "/pb.pay_service/receive"
	PayService_ReceiveQuery_FullMethodName    = "/pb.pay_service/receive_query"
	PayService_Out_FullMethodName             = "/pb.pay_service/out"
	PayService_OutQuery_FullMethodName        = "/pb.pay_service/out_query"
	PayService_ChannelQuery_FullMethodName    = "/pb.pay_service/channel_query"
	PayService_MerchantBalance_FullMethodName = "/pb.pay_service/merchant_balance"
)

// PayServiceClient is the client API for PayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayServiceClient interface {
	// 创建虚拟账户
	VirtualAccount(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error)
	// 收款单创建
	Receive(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error)
	// 收款单查询
	ReceiveQuery(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error)
	// 付款单创建
	Out(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error)
	// 付款单查询
	OutQuery(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error)
	// 支付通道查询
	ChannelQuery(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error)
	// 账户余额查询
	MerchantBalance(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error)
}

type payServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayServiceClient(cc grpc.ClientConnInterface) PayServiceClient {
	return &payServiceClient{cc}
}

func (c *payServiceClient) VirtualAccount(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRpcResp)
	err := c.cc.Invoke(ctx, PayService_VirtualAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) Receive(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRpcResp)
	err := c.cc.Invoke(ctx, PayService_Receive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) ReceiveQuery(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRpcResp)
	err := c.cc.Invoke(ctx, PayService_ReceiveQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) Out(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRpcResp)
	err := c.cc.Invoke(ctx, PayService_Out_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) OutQuery(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRpcResp)
	err := c.cc.Invoke(ctx, PayService_OutQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) ChannelQuery(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRpcResp)
	err := c.cc.Invoke(ctx, PayService_ChannelQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) MerchantBalance(ctx context.Context, in *PayRpcParam, opts ...grpc.CallOption) (*PayRpcResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRpcResp)
	err := c.cc.Invoke(ctx, PayService_MerchantBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServiceServer is the server API for PayService service.
// All implementations should embed UnimplementedPayServiceServer
// for forward compatibility.
type PayServiceServer interface {
	// 创建虚拟账户
	VirtualAccount(context.Context, *PayRpcParam) (*PayRpcResp, error)
	// 收款单创建
	Receive(context.Context, *PayRpcParam) (*PayRpcResp, error)
	// 收款单查询
	ReceiveQuery(context.Context, *PayRpcParam) (*PayRpcResp, error)
	// 付款单创建
	Out(context.Context, *PayRpcParam) (*PayRpcResp, error)
	// 付款单查询
	OutQuery(context.Context, *PayRpcParam) (*PayRpcResp, error)
	// 支付通道查询
	ChannelQuery(context.Context, *PayRpcParam) (*PayRpcResp, error)
	// 账户余额查询
	MerchantBalance(context.Context, *PayRpcParam) (*PayRpcResp, error)
}

// UnimplementedPayServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPayServiceServer struct{}

func (UnimplementedPayServiceServer) VirtualAccount(context.Context, *PayRpcParam) (*PayRpcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualAccount not implemented")
}
func (UnimplementedPayServiceServer) Receive(context.Context, *PayRpcParam) (*PayRpcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedPayServiceServer) ReceiveQuery(context.Context, *PayRpcParam) (*PayRpcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveQuery not implemented")
}
func (UnimplementedPayServiceServer) Out(context.Context, *PayRpcParam) (*PayRpcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Out not implemented")
}
func (UnimplementedPayServiceServer) OutQuery(context.Context, *PayRpcParam) (*PayRpcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutQuery not implemented")
}
func (UnimplementedPayServiceServer) ChannelQuery(context.Context, *PayRpcParam) (*PayRpcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelQuery not implemented")
}
func (UnimplementedPayServiceServer) MerchantBalance(context.Context, *PayRpcParam) (*PayRpcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantBalance not implemented")
}
func (UnimplementedPayServiceServer) testEmbeddedByValue() {}

// UnsafePayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServiceServer will
// result in compilation errors.
type UnsafePayServiceServer interface {
	mustEmbedUnimplementedPayServiceServer()
}

func RegisterPayServiceServer(s grpc.ServiceRegistrar, srv PayServiceServer) {
	// If the following call pancis, it indicates UnimplementedPayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PayService_ServiceDesc, srv)
}

func _PayService_VirtualAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRpcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).VirtualAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_VirtualAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).VirtualAccount(ctx, req.(*PayRpcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRpcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Receive(ctx, req.(*PayRpcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_ReceiveQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRpcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).ReceiveQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_ReceiveQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).ReceiveQuery(ctx, req.(*PayRpcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_Out_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRpcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Out(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_Out_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Out(ctx, req.(*PayRpcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_OutQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRpcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).OutQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_OutQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).OutQuery(ctx, req.(*PayRpcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_ChannelQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRpcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).ChannelQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_ChannelQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).ChannelQuery(ctx, req.(*PayRpcParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_MerchantBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRpcParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).MerchantBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_MerchantBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).MerchantBalance(ctx, req.(*PayRpcParam))
	}
	return interceptor(ctx, in, info, handler)
}

// PayService_ServiceDesc is the grpc.ServiceDesc for PayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.pay_service",
	HandlerType: (*PayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "virtual_account",
			Handler:    _PayService_VirtualAccount_Handler,
		},
		{
			MethodName: "receive",
			Handler:    _PayService_Receive_Handler,
		},
		{
			MethodName: "receive_query",
			Handler:    _PayService_ReceiveQuery_Handler,
		},
		{
			MethodName: "out",
			Handler:    _PayService_Out_Handler,
		},
		{
			MethodName: "out_query",
			Handler:    _PayService_OutQuery_Handler,
		},
		{
			MethodName: "channel_query",
			Handler:    _PayService_ChannelQuery_Handler,
		},
		{
			MethodName: "merchant_balance",
			Handler:    _PayService_MerchantBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay_client.proto",
}
